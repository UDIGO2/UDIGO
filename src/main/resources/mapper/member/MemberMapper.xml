<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.udigo.hotel.member.model.dao.MemberMapper">

    <!-- 회원 정보를 DTO에 매핑할 ResultMap -->
    <resultMap id="memberResultMap" type="com.udigo.hotel.member.model.dto.MemberDTO">
        <id property="memberCode" column="member_code"/>
        <result property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="phoneNo" column="phone_no"/>
        <result property="couponUsed" column="coupon_used"/>
        <result property="status" column="status"/>
        <result property="deletedAt" column="deleted_at" javaType="java.time.LocalDateTime"/>
    </resultMap>

    <!-- 아이디 중복 체크 (탈퇴한 회원 포함) -->
    <select id="checkDuplicateId" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM tbl_member
        WHERE member_id = #{memberId}
           OR (member_id = #{memberId} AND status = 'WITHDRAWN')
    </select>

    <!-- 이메일 중복 체크 (탈퇴한 회원 포함) -->
    <select id="checkDuplicateEmail" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM tbl_member
        WHERE email = #{email}
           OR (email = #{email} AND status = 'WITHDRAWN')
    </select>

    <!-- 회원 정보 저장 -->
    <insert id="insertMember" parameterType="com.udigo.hotel.member.model.dto.MemberDTO">
        INSERT INTO tbl_member (member_id, member_name, email, password, phone_no, coupon_used, status)
        VALUES (#{memberId}, #{memberName}, #{email}, #{password}, #{phoneNo}, #{couponUsed}, 'ACTIVE')
    </insert>

    <!-- 회원 정보 조회 (ID 기준) - 탈퇴한 회원은 30일 후 조회 불가 -->
    <select id="findByMemberId" resultMap="memberResultMap">
        SELECT * FROM tbl_member
        WHERE member_id = #{memberId}
          AND (status != 'WITHDRAWN' OR deleted_at <![CDATA[ < ]]> NOW() - INTERVAL 30 DAY);
    </select>

    <!-- 비밀번호 조회 (회원 ID 기반) -->
    <select id="getPasswordByMemberId" resultType="string">
        SELECT password FROM tbl_member WHERE member_id = #{memberId}
    </select>

    <!-- 이메일을 기반으로 회원 조회 -->
    <select id="findByEmail" resultType="com.udigo.hotel.member.model.dto.MemberDTO">
        SELECT member_code, email, password, member_name, phone_no, coupon_used, status
        FROM tbl_member
        WHERE email = #{email}
    </select>

    <!-- 회원 정보 수정 -->
    <update id="updateMember" parameterType="com.udigo.hotel.member.model.dto.MemberDTO">
        UPDATE tbl_member
        SET member_name = #{memberName}, email = #{email}, phone_no = #{phoneNo}, coupon_used = #{couponUsed}
        WHERE member_code = #{memberCode}
    </update>

    <!-- 이메일을 이용한 아이디 찾기 -->
    <select id="findIdByEmail" resultType="string">
        SELECT member_id FROM tbl_member WHERE email = #{email}
    </select>

    <!-- 아이디와 이메일이 일치하는 회원 조회 -->
    <select id="findByMemberIdAndEmail" parameterType="map" resultType="com.udigo.hotel.member.model.dto.MemberDTO">
        SELECT * FROM tbl_member WHERE member_id = #{memberId} AND email = #{email}
    </select>

    <!-- 비밀번호 변경 (임시 비밀번호 저장) -->
    <update id="updatePassword" parameterType="map">
        UPDATE tbl_member
        SET password = #{password}
        WHERE member_id = #{memberId}
    </update>

    <!-- 전체 회원 목록 조회 -->
    <select id="selectAllMembers" resultType="com.udigo.hotel.member.model.dto.MemberDTO">
        SELECT member_code, member_id, member_name, email, phone_no, join_date, status
        FROM tbl_member
    </select>

    <!-- 특정 회원 정보 조회 (회원 ID 기준) -->
    <select id="selectMemberById" parameterType="string" resultType="com.udigo.hotel.member.model.dto.MemberDTO">
        SELECT member_code, member_id, member_name, email, password, phone_no, join_date, coupon_used, status, role
        FROM tbl_member
        WHERE member_id = #{memberId}
    </select>

    <!-- 회원 탈퇴 처리 (ID 무효화 및 상태 변경) -->
    <update id="updateWithdrawMember">
        UPDATE tbl_member
        SET
            member_id = CONCAT('deleted_member_', member_code),
            email = CONCAT('deleted_', member_id, '@deleted.com'),
            password = 'DELETED_USER',
            phone_no = NULL,
            status = 'WITHDRAWN',
            deleted_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <!-- 쿠폰 사용 여부 조회 -->
    <select id="getCouponStatus" parameterType="string" resultType="int">
        SELECT coupon_used FROM tbl_member WHERE member_id = #{memberId}
    </select>

    <!-- 쿠폰 사용 여부 업데이트 ) -->
    <update id="updateCouponUsed">
        UPDATE tbl_member
        SET coupon_used = 1
        WHERE member_code = #{memberCode}
    </update>

    <!-- 쿠폰 사용 여부 조회 ) -->
    <select id="getCouponStatusByCode" parameterType="int" resultType="int">
        SELECT coupon_used FROM tbl_member WHERE member_code = #{memberCode}
    </select>

</mapper>
